# -*- coding: utf-8 -*-
"""COVID19Spain

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AOCsruz9pzu4IOAnhLah_pbptJxIZ5TH
"""

import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
import matplotlib.dates as mdates
import datetime

data = pd.read_csv('https://covid19.isciii.es/resources/serie_historica_acumulados.csv', header= 0, encoding= 'unicode_escape')
print(data.columns)

dataw = pd.read_csv('https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv')
print(dataw.columns)

#data format spain
pd.DataFrame(data)
data['FECHA'] = pd.to_datetime(data['FECHA'], format='%d/%m/%Y')
data = data.drop(data[data['CCAA'].map(len) > 2].index)
data.info()

#data CCAA
dataCCAA = data.groupby(['CCAA','FECHA']).agg(
                                  {'PCR+': 'sum',
                                   'UCI': 'sum', 
                                   'Fallecidos':'sum', 
                                  }).reset_index()
dataCCAA['new_cases'] = dataCCAA.groupby(['CCAA'])['PCR+'].diff().fillna(0)
dataCCAA['new_icare'] = dataCCAA.groupby(['CCAA'])['UCI'].diff().fillna(0)
dataCCAA['new_deaths'] = dataCCAA.groupby(['CCAA'])['Fallecidos'].diff().fillna(0)

dataCCAA.info()
dataCCAA

dataCCAA.new_cases=dataCCAA.new_cases.mask(dataCCAA.new_cases.lt(0),0)
dataCCAA.new_icare=dataCCAA.new_icare.mask(dataCCAA.new_icare.lt(0),0)
dataCCAA.new_deaths=dataCCAA.new_deaths.mask(dataCCAA.new_deaths.lt(0),0)
dataCCAA.info()
dataCCAA

#data spain
dataF = data.groupby(['FECHA']).agg(
                                  {'PCR+': 'sum',
                                   'UCI': 'sum',
                                   'Fallecidos':'sum', 
                                  }).reset_index()
dataF['new_cases'] = dataF['PCR+'].diff()
dataF['new_icare'] = dataF['UCI'].diff()
dataF['new_deaths'] = dataF['Fallecidos'].diff()
dataF.info()

#total cases
variable = 'PCR+'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#daily cases
variable = 'new_cases'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#correcting biases
rolling_average_days = 7
dataF['new_cases_av'] = dataF['new_cases'].rolling(window=rolling_average_days).mean()
variable = 'new_cases_av'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#data format world
dataw['date'] = pd.to_datetime(dataw['date'])
dataw = dataw.rename(columns={'date': 'FECHA'})
dataw.info()

#data format world-spain
dataESP = dataw[dataw['location'] == 'Spain']
dataESP

#data spain + world-spain
datatest = dataF.merge(dataESP[['FECHA','total_tests']], on=['FECHA'])
datatest

#test spain interpolation
datatest['total_tests'].interpolate(method="linear", limit_area='inside', inplace=True)
datatest

#total test
variable = 'total_tests'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(datatest['FECHA'],datatest[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.savefig(variable + '.png')
plt.show()

#total daily tests correcting biases
rolling_average_days = 7
datatest['daily_tests_av'] = datatest['total_tests'].diff().rolling(window=rolling_average_days).mean()
variable = 'daily_tests_av'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(datatest['FECHA'],datatest[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.savefig(variable + '.png')
plt.show()

#percentage of new positive over the total daily tests
dataF['perc_positive'] = ((dataF['new_cases_av'])/(datatest['daily_tests_av'])*100)
variable = 'perc_positive'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.savefig(variable + '.png')
plt.show()

#total deaths
variable = 'Fallecidos'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#intensive care
variable = 'UCI'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#daily deaths
rolling_average_days = 7
dataF['new_deaths_av'] = dataF['new_deaths'].rolling(window=rolling_average_days).mean()
variable = 'new_deaths_av'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#intensive care
rolling_average_days = 7
dataF['new_icare_av'] = dataF['new_icare'].rolling(window=rolling_average_days).mean()
variable = 'new_icare_av'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#severe_deaths
dataF['severe_deaths'] = dataF['new_deaths_av'] + dataF['new_icare_av']
variable = 'severe_deaths'
fig, ax = plt.subplots(figsize=(12, 5))
ax.grid()
ax.scatter(dataF['FECHA'],dataF[variable])
ax.set(xlabel="Date",ylabel=variable,title=variable)
date_form = DateFormatter("%d-%m")
ax.xaxis.set_major_formatter(date_form)
ax.xaxis.set_major_locator(mdates.DayLocator(interval = 3))
ax.axvline(datetime(2020, 4, 1), c="green", zorder=0)
fig.autofmt_xdate()
fig.savefig(variable + '.png')
plt.show()

#Modeling the epidemic trend
import numpy as np
from sklearn import linear_model
# prepare the lists for the model
X = dataF['FECHA']
y = dataF['severe_deaths'].tolist()[1:]
# date format is not suitable for modeling, let's transform the date into incrementals number starting from April 1st
starting_date = 41  # April 1st is the 41st day of the series
day_numbers = []
for i in range(1, len(X)):
    day_numbers.append([i])
X = day_numbers
# # let's train our model only with data after the peak
X = X[starting_date:]
y = y[starting_date:]
# Instantiate Linear Regression
linear_regr = linear_model.LinearRegression()
# Train the model using the training sets
linear_regr.fit(X, y)
print ("Linear Regression Model Score: %s" % (linear_regr.score(X, y)))

#Predict future trend
from sklearn.metrics import max_error
import math
y_pred = linear_regr.predict(X)
error = max_error(y, y_pred)

X_test = []
future_days = 55
for i in range(starting_date, starting_date + future_days):
    X_test.append([i])
y_pred_linear = linear_regr.predict(X_test)

y_pred_max = []
y_pred_min = []
for i in range(0, len(y_pred_linear)):
    y_pred_max.append(y_pred_linear[i] + error)
    y_pred_min.append(y_pred_linear[i] - error)

# convert date of the epidemic peak into datetime format
from datetime import datetime, timedelta

date_zero = (dataF['FECHA'][starting_date])
# creating x_ticks for making the plot more appealing
date_prev = []
x_ticks = []
step = 5
data_curr = date_zero
x_current = starting_date
n = int(future_days / step)
for i in range(0, n):
    date_prev.append(str(data_curr.day) + "/" + str(data_curr.month))
    x_ticks.append(x_current)
    data_curr = data_curr + timedelta(days=step)
    x_current = x_current + step

# plot known data
plt.grid()
plt.scatter(X, y)
# plot linear regression prediction
plt.plot(X_test, y_pred_linear, color='green', linewidth=2)
# plot maximum error
plt.plot(X_test, y_pred_max, color='red', linewidth=1, linestyle='dashed')
#plot minimum error
plt.plot(X_test, y_pred_min, color='red', linewidth=1, linestyle='dashed')
plt.xlabel('Days')
plt.xlim(starting_date, starting_date + future_days)
plt.xticks(x_ticks, date_prev)
plt.ylabel('severe_deaths')
plt.yscale("log")
plt.savefig("prediction.png")
plt.show()

import math
def n_to_date(n):
    #it converts a number to a date, considering starting from starting_date
    return (date_zero + timedelta(days=n-starting_date)).strftime('%d/%m/%Y')
def build_line(x1,y1,x2,y2):
    m = float(y2 - y1)/(x2-x1)
    q = y1 - (m*x1)
    return [m,q]

data_zero = round(- linear_regr.intercept_ / linear_regr.coef_[0])

line_max = build_line(X_test[0][0], y_pred_max[0], X_test[1][0], y_pred_max[1])
data_zero_max = math.ceil(- line_max[1] / line_max[0])
data_zero_max = n_to_date(data_zero_max)

line_min = build_line(X_test[0][0], y_pred_min[0], X_test[1][0], y_pred_min[1])
data_zero_min = math.floor(- line_min[1] / line_min[0])
data_zero_min = n_to_date(data_zero_min)
print ()
print ("Zero intensive cares and deaths expected between %s and %s" % (data_zero_max, data_zero_min))

#Regional trends
zone1_df = dataCCAA[dataCCAA.CCAA.isin(['MD','CT','PV'])]
zone1_df['Fallecidos'].sum()
print("Zone 1 accounts for %s percent of the total deaths" % (round(zone1_df['Fallecidos'].sum() / data['Fallecidos'].sum() * 100,2)))

regions = {'AN': 1, 'AS' : 3, 'CL': 7,'CM': 8, 'GA' : 16, "RI" : 17}

rolling_average_days = 7

regional_data_list = []

for region_name, region_code in regions.items():
    is_region = dataCCAA['CCAA'] == region_name
    data_region = dataCCAA[is_region].copy()
    date = data_region['FECHA']
    date_format = [pd.to_datetime(d, format='%d/%m/%Y') for d in date]
    data_region['new_cases'] = data_region['new_cases'].rolling(window=rolling_average_days).mean()
    data_region['new_deaths'] = data_region['new_deaths'].rolling(window=rolling_average_days).mean()
    data_region['perc_deaths'] = ((data_region['new_deaths'])/(data_region['new_cases'])*100)
    data_region['severe_deaths'] =  data_region['new_deaths'].rolling(window=rolling_average_days).mean() + data_region['new_icare'].rolling(window=rolling_average_days).mean()
    regional_data_list.append(data_region)

list_of_variables = ['perc_deaths', 'severe_deaths']

for variable in list_of_variables:
    print("Creating regional charts for " + variable)
    fig, axs = plt.subplots(3, 2, sharey=True,figsize=(12, 8))
    fig.suptitle('Regional trend of ' + variable,fontsize = 'large')
    date_form = DateFormatter("%d-%m")
    counter = 0
    for ax in axs.flat:
        ax.scatter(date_format, regional_data_list[counter][variable])
        ax.set_title(regional_data_list[counter]['CCAA'].iloc[0], fontsize='medium')
        ax.xaxis.set_major_formatter(date_form)
        # Ensure a major tick for each week using (interval=1)
        ax.xaxis.set_major_locator(mdates.WeekdayLocator(interval=1))
        ax.grid()
        fig.autofmt_xdate()
        counter +=1
    fig.tight_layout()
    fig.savefig('Regional trend of ' + variable + '.png')
    plt.show()